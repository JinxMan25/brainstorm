<!DOCTYPE html>
<%= stylesheet_link_tag "test" %>
    <div id="update">
        <input name="updateButton" type="button" value="Update" onclick="newData()"/>
    </div>
<h1 class="title"><%= @mindmap.mindmap_name %></h1>
<div class="addnode">
  <h2></h2>
  <h3 id="target">
    &#10095 Target(s)<span class="arrowright">&#10141</span><span class="target"></span>
  </h3>
  <h3 id="source">
    &#10095 Source<span class="arrowright">&#10141</span><span class="source"></span>
  </h3>
</div>
    <%= javascript_include_tag "d3" %>
    <script>


    var width = 960,
        height = 500;

    var force = d3.layout.force()
        .size([width, height])
        .linkDistance(150)
        .charge(-300)
        .on("tick", tick);

    var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height);

        var dataset = <%= @nodes.to_json.html_safe %>

    var link = svg.append("g").selectAll(".link"),
    node = svg.selectAll(".node");

    var nodes = {};

    update(dataset);

    function newData()
    {
      var newDataset = <%= @nodes2.to_json.html_safe %>

        update(newDataset);
    }

    function update(links)
    {
        d3.values(nodes).forEach(function(aNode){ aNode.linkCount = 0;});
            // Reset the link count for all existing nodes by
            // creating an array out of the nodes list, and then calling a function
            // on each node to set the linkCount property to zero.

        // Compute the distinct nodes from the links.
        links.forEach(function(link)
        {
          link.source = nodes[link.source] || (nodes[link.source] = {name: link.source, target: link.target, body: link.source_body, linkCount:0, fixed: false});    // initialize new nodes with zero links
          link.source.linkCount++;
              // record this link on the source node, whether it was just initialized
              // or already in the list, by incrementing the linkCount property
              // (remember, link.source is just a reference to the node object in the
              // nodes array, when you change its properties you change the node itself.)

          link.target = nodes[link.target] || (nodes[link.target] = {name: link.target, source: link.source.name, body: link.target_body, linkCount:0, fixed: false});    // initialize new nodes with zero links

          link.target.linkCount++;
        });

        d3.keys(nodes).forEach(
            // create an array of all the current keys(names) in the node list,
            // and then for each one:

            function (nodeKey)
            {
                if (!nodes[nodeKey].linkCount)
                {
                    // find the node that matches that key, and check it's linkCount value
                    // if the value is zero (false in Javascript), then the ! (NOT) operator
                    // will reverse that to make the if-statement return true,
                    // and the following will execute:

                    delete(nodes[nodeKey]);
                        //this deletes the object AND its key from the nodes array
                 }
             }
         );
        force
            .nodes(d3.values(nodes))
            .links(links)
            .on("tick", tick)
            .start();

        // -------------------------------

        // Compute the data join. This returns the update selection.
                // Compute new attributes for entering and updating markers.
        

        // -------------------------------

        // Compute the data join. This returns the update selection.
        link = link.data(force.links());

        // Remove any outgoing/old paths.

        link.exit().remove();
        // Compute new attributes for entering and updating paths.
        link.enter().append("line")
            .attr("class", "link")
            

        // -------------------------------

        // Compute the data join. This returns the update selection.
        node = node.data(force.nodes());
        // Add any incoming circles.
        var newg = node.enter().append("g")
          .attr("class", "node")
          .on("click", click)
          .on("mouseover", mouseover)
          .on("mouseout", mouseout)
          .call(force.drag);

        var newnode = newg.append("circle");
        node.exit().remove();
        node.select("text").remove();
        node.select("text").remove();

        node.append("text")
          .attr("text-anchor", "middle")
          .text(function(d) { return d.name; })
          .attr("dy", ".20em")
          .attr("class", "node_title")
          .attr("font-size",12);

        node.append("text")
          .attr("text-anchor", "middle")
          .attr("height", "10px")
          .attr("width", "10px")
          .text(function(d) { 
            return d.body; 
          })
          .attr("dy", "-0.1em")
          .attr("class","node_body")
          .attr("font-size", 12)
          .call(wrap,400);

        newnode
          .attr("r", function(d){
            if (d.weight == "1"){
              return 28;
            } else if (d.weight == "2") {
              return 17.5 * d.weight;
            } else if (d.weight == "3") {
              return 13 * d.weight;
            } else if (d.weight == "4") {
              return 11 * d.weight;
            } else if (d.weight == "5") {
              return 10* d.weight;
            } else if (d.weight == "6") {
              return 7 * d.weight;
            } else if (d.weight >= "7") {
              return 6.5 * d.weight;
            }
          })
            .attr("fill","grey")
            .attr("stroke","black")
            .attr("stroke-width",1.5)
            .attr("data-target", function(d){
                return d.target;
                })
            .attr("data-name", function(d){
                return d.name;
                })
            .attr("data-source", function(d){
                return d.source;
          });
            newnode.forEach(function(l){
                debugger;
            });
  d3.select("circle")
    .attr("r", 100)
    .attr("x", "500")
    .attr("y", "500")
    .attr("id", "what");

  d3.select("circle")[0][0].__data__.fixed = 3;
  d3.select("circle")[0][0].__data__.px = 480;
  d3.select("circle")[0][0].__data__.py = 250;
    }


    // Use elliptical arc path segments to doubly-encode directionality.
    function tick() {
        link
          .attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });
        node.attr("transform", transform);
    }


  function click() {
    
    if (d3.select(this).select("circle").attr("r") > 100) {
      force
        .gravity(0.1)
        .linkDistance(150)
        .charge(-600)
        .start();
      
      $(".addnode").removeClass("translate");
      d3.select(this).select("circle").transition()
        .duration(1000)
        .attr("r", function(d){
          if (d.weight == "1"){
            return 28;
          }else if (d.weight == "2") {
            return 17.5 * d.weight;
          }else if (d.weight == "3") {
            return 13 * d.weight;
          }else if (d.weight == "4") {
            return 11 * d.weight;
          }else if (d.weight == "5") {
            return 10* d.weight;
          }else if (d.weight == "6"){
            return 7 * d.weight;
          }else if (d.weight >= "7"){
            return 6.5 * d.weight;
          }
        })
        .attr("stroke","black")
        .attr("stroke-width",1.5);
      d3.select(this).select('.node_body').transition()
        .ease("elastic")
        .duration(1500)
        .style("opacity", "0");
      d3.selectAll(".node_title").transition()
        .ease("elastic")
        .duration(1000)
        .style("font-size", "15px")
        .attr("dy", ".20em");
        
    } else {
      $(".addnode").removeClass("translate");  
      force
        .gravity(0.01)
        .linkDistance(280)
        .charge(-250);
      force.start();
      d3.selectAll("circle").transition()
        .duration(1000)
        .attr("r", function(d){
          if (d.weight == "1") {
            return 28;
          } else if (d.weight == "2") {
              return 17.5 * d.weight;
          } else if (d.weight == "3") {
              return 13 * d.weight;
          } else if (d.weight == "4") {
              return 11 * d.weight;
          } else if (d.weight == "5"){
              return 10* d.weight;
          } else if (d.weight == "6"){
              return 7 * d.weight;
          } else if (d.weight >= "7"){
              return 6.5 * d.weight;
          }
        })
        .attr("stroke-width", 1.5)
        .attr("stroke", "black");
      d3.selectAll("text").transition()
        .duration(750)
        .style("font-size", "15px")
        .ease("elastic")
        .attr("dy",".20em");
      d3.selectAll(".node_body").transition()
        .style("opacity", "0")
        .duration(1500)
        .ease("elastic");
      d3.select(this).select("circle").transition()
        .ease("elastic")
        .duration(2500)
        .attr("r", 250)
        .style("z-index","200")
        .attr("stroke-width", 10)
        .attr("stroke", "purple");
      d3.select(this).select("text").transition()
        .duration(2500)
        .style("font-size", "72px")
        .ease("elastic")
        .attr("dy", "-100px");
      d3.select(this).select('.node_body').transition()
        .duration(3000)
        .ease("elastic")
        .style("font-size", 18)
        .style("opacity", "1")
        .attr("dy", "0px");
        
      }
  }
    function transform(d)
    {
        return "translate(" + d.x + "," + d.y + ")";
    }

  function mouseover() {

    if (d3.select(this).select("circle").attr("r") < 100) {
      d3.select(this).select("text").transition()
        .style("font-size","25px")
        .ease("elastic")
        .duration(1000);
      d3.select(this).select("circle").transition()
          .ease("elastic")
          .duration(1000)
          .attr("r",function(d){
            if (d.weight == "1") {
              return 28*2;
            } else if (d.weight == "2") {
              return 17.5 * d.weight * 1.5;
            } else if (d.weight == "3") {
              return 13 * d.weight*1.5;
            } else if (d.weight == "4") {
              return 11 * d.weight*1.5;
            } else if (d.weight == "5") {
              return 10* d.weight*1.5;
            } else if (d.weight == "6") {
              return 7 * d.weight*1.5;
            } else if (d.weight >= "7") {
              return 5 * d.weight*1.5;
            }
          });
    }
  }

  function mouseout() {
    if( d3.select(this).select("circle").attr("r") < 90) {
      d3.select(this).select("text").transition()
        .style("font-size", "15px")
        .ease("elastic")
        .duration(750);
      d3.select(this).select("circle").transition()
        .ease("elastic")
        .duration(750)
        .attr("r",function(d){
          if (d.weight == "1") {
            return 28;
          } else if (d.weight == "2") {
            return 17.5 * d.weight;
          } else if (d.weight == "3") {
            return 13 * d.weight;
          } else if (d.weight == "4") {
            return 11 * d.weight;
          } else if (d.weight == "5") {
            return 10* d.weight;
          } else if (d.weight == "6") {
            return 7 * d.weight;
          } else if (d.weight >= "7") {
            return 6.5 * d.weight;
          }
         });
    }
}

  function wrap (text, width) {
    text.each(function() {
      var text = d3.select(this),
      words = text.text().split(/\s+/).reverse(),
      word,
      line = [],
      lineNumber = 0,
      lineHeight = 0.9, // ems
      y = text.attr("y"),
      dy = parseFloat(text.attr("dy")) || 0,
      tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
      while (word = words.pop()) {
        line.push(word);
        tspan.text(line.join(" "));
        if (tspan.node().getComputedTextLength() > width) {
          line.pop();
          tspan.text(line.join(" "));
          line = [word];
          tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
        }
      }
    });
  }

  $("circle").dblclick(function(){
    var node = $(this).data("name");
    $(".addnode h2").text(node);
    $(".addnode").addClass('translate');  
  });

  $("circle").on({
    mouseenter: function() { 
      if ($(this).data("target")) {
        var target = $(this).data("target");
          $(".target").text(target);
        } else {
          $(".target").text("None");
        }
        if ($(this).data("source")) {
          var source = $(this).data("source");
          $(".source").text(source);
        } else {
          $(".source").text("self");
        }
    
      var node = $(this).data("name");
      $(".addnode h2").text(node);
      $(".addnode").addClass('translate');
    },
    mouseleave: function() {
      $(".addnode").removeClass('translate');
                }
  });
    </script>
